You are going to **build from scratch** a full-stack web app called **Finova Turfs** inside this Replit. The stack is **React + Tailwind (frontend)** and **FastAPI (backend)**. This is a dark-themed, stylish, mobile-first PoC showcasing every key feature of a sports ground booking platform (for football/cricket).

---

## 1. Project Setup

- **Frontend**: React.js + Tailwind CSS + React Router + React Hook Form + Framer Motion + React Toastify  
- **Backend**: Python + FastAPI (`server.py`) with CORS enabled and in-memory mocked data  
- **Running Locally (Replit)**:
  - Frontend: `npm install && npm run dev` → runs on port 3000
  - Backend: `pip install fastapi uvicorn` → `uvicorn server:app --reload --port 8000`

---

## 2. Branding & Theme

- **App Name**: `Finova Turfs`
- **Color Palette**:  
  - Background: **Black** (`#000000`)  
  - Primary: **Dark Blue** (`#1E3A8A`)  
  - Accent: White text, soft neon greens for highlights  
- Rounded corners, soft shadows, clean glassmorphic UI
- Font: Modern sans-serif

---

## 3. Authentication & Routing

- **User Login** (`/login`) → redirects to `/dashboard`
- **Admin Login** (`/admin/login`) → redirects to `/admin/dashboard`
- Use `localStorage` to store a mock JWT and control route access
- Key Routes:
  - Users: `/dashboard`, `/book`, `/bookings`, `/help`
  - Admins: `/admin/dashboard`, `/admin/slots`, `/admin/pricing`, `/admin/layout`, `/admin/bookings`, `/admin/loyalty`, `/admin/teams`, `/admin/settings`

---

## 4. Global Layout

### NavBar (Shared)
- Links: `Home`, `Book a Turf`, `My Bookings`, `Help`
- Top-right **user avatar** → dropdown with: `Profile`, `Settings`, `Logout`
- Use dark theme + animations

### AdminSidebar
- Sidebar layout for admin panel
- Use `<details>` or similar to group rarely-used links under `Advanced` accordion

---

## 5. User Features

### A. Dashboard (`/dashboard`)
- 3 Cards:
  - **Book a Turf**
  - **My Bookings**
  - **AI Assistant** (chat bubble: “Best time to play tomorrow?”)

### B. Ground Listing (`/book`)
- Search bar + city filter
- Ground cards with name, sport icon, map preview placeholder
- Button: “View Slots”

### C. TimeSlotPicker Component (replaces calendar)
- On “View Slots,” render every **30-minute slot** between `open_time` & `close_time` (e.g., 10:00 PM – 1:00 AM → 10:00, 10:30, 11:00 … 00:30)
- For each slot:
  - **Demand Badge** (High/Low from `/api/slots`) with tooltip (“High demand = peak pricing”)
  - **Weather Icon + Temperature** from `/api/forecast/{date}`
- On slot click → expand card (Framer Motion):  
  - Duration picker (0.5h, 1h, 1.5h, 2h, etc.)  
  - Dynamic price breakdown (demand, weather, time)  
  - Loyalty points toggle (mock 50 points)  
  - “Confirm Booking” → `POST /api/book` → toast “Booking Confirmed!”
- Fully responsive: **horizontal scroll** for mobile, large tap targets

### D. My Bookings (`/bookings`)
- Table of past bookings: Date, Ground, Duration, Status, Weather Icon, “Rebook” button

### E. AI Assistant (mock GPT-4)
- Route: `/dashboard`
- Chat bubble to ask: “Best time to play tomorrow?”
- `POST /api/ai/assistant` → return GPT-styled reply with emoji

---

## 6. Admin Features

### A. Dashboard (`/admin/dashboard`)
- Overview: occupancy %, revenue stats, booking stats (mock)

### B. Slot & Schedule Manager (`/admin/slots`)
- CRUD slots: open/close times, peak/off-peak, maintenance

### C. Ground Layout Designer (`/admin/layout`)
- Canvas mock: drag/drop zones (goals, halves) – visual only

### D. Pricing Manager (`/admin/pricing`)
- Table: day/time/weather/demand multipliers

### E. Bookings Overview (`/admin/bookings`)
- Charts: heatmap, top users/teams

### F. Loyalty Configurator (`/admin/loyalty`)
- Define tiers, free-hour thresholds

### G. Team Tracker (`/admin/teams`)
- Top users by usage/spend

### H. Manual Walk-in Bookings
- Simple form → `POST /api/book`

---

## 7. Backend API Endpoints (`server.py`)

```python
GET  /api/grounds                 → list of available grounds
GET  /api/slots/{ground_id}?date=YYYY-MM-DD
     → returns { open_time, close_time, slots: [{ time, demand }] }

GET  /api/forecast/{date}
     → { hourly: [{ time, temp, icon }] }

POST /api/book
     → accepts { ground_id, date, time, duration, useLoyalty }, returns { id, status }

GET  /api/bookings               → list user's bookings
POST /api/ai/assistant           → returns {"reply": "...GPT-style message..."}
